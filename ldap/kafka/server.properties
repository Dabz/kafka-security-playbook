broker.id=0
listeners=SASL_PLAINTEXT://kafka:9093
advertised.listeners=SASL_PLAINTEXT://kafka:9093
log.dirs=/var/lib/kafka
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1
zookeeper.connect=zookeeper:2181

# SASL Configuration
security.inter.broker.protocol=SASL_PLAINTEXT
sasl.enabled.mechanisms=SCRAM-SHA-256
sasl.mechanism.inter.broker.protocol=SCRAM-SHA-256
security.inter.broker.protocol=SASL_PLAINTEXT
allow.everyone.if.no.acl.found=false
super.users=User:kafka
authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer

# Configure authorizer
authorizer.class.name=io.confluent.kafka.security.ldap.authorizer.LdapAuthorizer
# LDAP provider URL
ldap.authorizer.java.naming.provider.url=ldap://ldap:389/DC=CONFLUENT,DC=IO
# Refresh interval for LDAP cache. If set to zero, persistent search is used.
# Reduced this value from the default 60000ms (60sec) to 10sec to detect
# faster the updates done in the LDAP database
ldap.authorizer.refresh.interval.ms=10000

# Lets try to see if we can run without security
ldap.authorizer.java.naming.security.authentication=SIMPLE
ldap.authorizer.java.naming.security.principal=cn=admin,dc=confluent,dc=io
ldap.authorizer.java.naming.security.credentials=admin

# Search base for group-based search
#ldap.authorizer.group.search.base=ou=groups,dc=confluent,dc=io

# Remember that LDAP works in a context. The search base is ou=groups,dc=confluent,dc=io
# But since my URL is ldap://ldap:389/DC=CONFLUENT,DC=IO, we are already working in the dc=confluent,dc=io context
ldap.authorizer.group.search.base=ou=groups

# Object class for groups
ldap.authorizer.group.object.class=posixGroup
ldap.authorizer.group.search.scope=2
# Name of the attribute from which group name used in ACLs is obtained
ldap.authorizer.group.name.attribute=cn
# Regex pattern to obtain group name used in ACLs from the attribute `ldap.authorizer.group.name.attribute`
ldap.authorizer.group.name.attribute.pattern=
# Name of the attribute from which group members (user principals) are obtained
ldap.authorizer.group.member.attribute=memberUid
# Regex pattern to obtain user principal from group member attribute
ldap.authorizer.group.member.attribute.pattern=cn=(.*),ou=users,dc=confluent,dc=io
